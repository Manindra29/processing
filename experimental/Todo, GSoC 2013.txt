TODO List for Experimental Mode Plus- GSOC 2013

This would also be a break down of my thought process and ideas as I tackle various tasks. Also lines are fairly long. Make sure you turn on word wrap. ;)

Manindra Moharana (me@mkmoharana.com)

* : Todo, x : Done, ? : Undecided Todo, ! : Critical, + : Minor Todo

Code Completion 
==============
The big stuff:
x! Code competition for local code is working with recursive look up. 
x! Code completion with library code, non-nested seems to be broken, fix it. Fixed.
x Completion for external classes - ArrayList, HashMap, etc.
*! Recursive lookup for compiled(library) code!
*! Library CC for nested would be tricky. Need to jump from local->compiled code while searching recursively. Recursive find's current implementation is based on ASTNode return type. Afaik, no way to instantiate orphaned 
ASTNode objects(or did I miss it?). ASTNode objects have to be created only from the main ast instance. But I need to find a way to switch to compiled instances from local class instance.
*! May be I should just implement recursive find for compiled code first, see how it goes and hopefully it would give me some ideas about how to integrating the two. 
x! Should I implement wrapper for ASTNode? - possibly needed for code completion with compiled and non-compiled code. Done.
* Trie implementation would be lower priority, "premature optimisation is pure evil". Get all features of CC working good enough and then plan this. 
*+ Differentiating between multiple statements on the same line. How to?

Finer details
* Obj a1; a1.-> completion doesn't work before it is instantiated. Look into that.
* printStuff(int,float,String)  - completion endings have to be appropriate. Right now it's just printStuff(,,). Cursor positioning also needs to be taken care of. Argument list as tooltip if possible?
* Sorted list of completion candidates - fields, then methods. It's unsorted presently.
*! p5 enhanced stuff in java, how does it fit in with everything else, and edge cases. Possibly add support for them.
* Reflection API - getMethods vs getDeclaredMethods.
* Need to add offset correction to ASTGenerator and its lookup methods. Or leave it for later?

Offset Mapping  
==============
First major hurdle is offset mapping
*! pde<->java code offset : precise conversion needed
x for the above, I've decide to first implement a sketch outline like feature, which would highlight an AST element precisely in the pde code. This would ensure I've got the mapping working properly. And may lead to a future feature.
* This is precise upto a certain line. Once on a line, pde stuff have to be taken into consideration.
x Edge case - multiple statements in a single line
x PDE specific enhancements will also have to be tackled like int(), # literals. The length of the node returned needs to be modified to make up for extra chars added like PApplet.parseFloat, etc. Also the 2nd or futher pde enhancements in the same line means even the beginning offset would need adjustment. Meh.
* The above is almost working. There are some offset issues when multiple pde statements are in the same line, but I guess it's good enough for now to proceed ahead. Will keep a close watch for potential bugs.

Refactoring
===========
Refactoring would work only when code is compiler error free. I plan to do a find replace type op on the compile ready code. 
1. First identify the declaration of the variable in the AST. We'll then make a list of all its occurrences. 
2. DFS through the AST, for each (SimpleName)instance of the word in code, find if the matched word is the same one whose declaration we found. 
x Edge Case: For renaming a TypeDeclaration, the declaration of SimpleName instance of the TD and it's constructor(s) aren't added to the list generated by DFS. So for renaming TD, will have to manually add the TD SimpleName and it's constructors' SimpleNames to the a list of declaration nodes that can be positively matched against.
x Renaming any constructor is equivalent to renaming the TD
3. Find corresponding PDE offsets of the SimpleNames, rename in each line.
x Edge Case: Need to take displaced offsets on a line, due to pde enhancements, into consideration.
4. All the changes in code would be made in a separate copy of the code(?). After all the renaming is done, allow it only if the new code compiles. Basically an undo should be possible in case of conflicts.
* Undo misbehaves here, handle carefully.
* Handle saving. If sketch closed after renaming w/o saving find bugs.
* Refactoring ui
* Add support for word select on right click and rename, mouse co-ordinates need to obtained carefully

Quick Navigation
================
x Ctrl + Click on an element to scroll to its definition in code
x Local Vars
x Local Methods
x Local Classes
x Recursive lookup, a.b().c()
x Now highlihgting the declaration name, rather than the whole declaration.
*+ A silly bug where the name of the first field declaration isn't highlighted correctly. Seems to be happening if there's a javadoc or multiline comment near about the top.

